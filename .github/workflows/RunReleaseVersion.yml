name: 3 - Create Release and Build Prod version
run-name: ${{ github.actor }} Started Creating Release of Pull request branche ${{ github.event.pull_request.head.ref }}

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  create-release:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/') || startsWith(github.event.pull_request.head.ref, 'fix/')
    runs-on: ubuntu-latest
    outputs:
      tag_version: ${{ steps.release_step.outputs.tag_version }}
    steps:
      - name: Extrair versão da branch de origem
        id: version
        run: |
          SOURCE_BRANCH=${{ github.event.pull_request.head.ref }}
          VERSION=$(echo $SOURCE_BRANCH | sed -E 's/(release|fix)\/(.*)/\2/')
          PREFIX=$(echo $SOURCE_BRANCH | sed -E 's/^(release|fix)\/.*/\1/')
          TITLE="${PREFIX^} ${VERSION}"
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "title=$TITLE" >> $GITHUB_ENV
      - name: Build
        id: release_step
        run: echo "tag_version=${{ env.version }}" >> $GITHUB_OUTPUT
      - name: Criar Release no GitHub
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.version }}
          name: ${{ env.title }}
          body: "Release gerada automaticamente a partir do pull_request da branch ${{ github.event.pull_request.head.ref }} para branch main"
          draft: false
          prerelease: false
          generate_release_notes: true
          append_body: true

  publish-release:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Baixar o repositório na tag criada
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.create-release.outputs.tag_version }}
      - name: Extrair versão da tag
        id: extract_version_from_tag
        run: |
          TAG_NAME=${{ needs.create-release.outputs.tag_version }}
          VERSION=$(echo $TAG_NAME | grep -Eo '^[0-9]+\.[0-9]+\.[0-9]+$')
          if [ -z "$VERSION" ]; then
            echo "Erro: Tag inválida. Certifique-se de usar o formato semantic version (x.x.x)."
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.version }}
            ghcr.io/${{ github.repository }}:latest
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}